{"version":3,"sources":["components/QuoteBox.js","App.js","index.js"],"names":["QuoteBox","props","componentDidMount","getRandomQuote","fetch","then","response","json","data","quotes","map","item","quote","author","index","Math","floor","random","length","setState","tweetURL","replace","catch","error","console","log","handleNewQuote","colors","randomColor","color","handleColorChange","state","bind","this","id","href","className","aria-hidden","onClick","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA0EeA,G,wDAtEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,kBAAoB,WAClB,EAAKC,kBAfY,EAmBnBA,eAAiB,WACfC,MAAM,0IACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUA,EAAKC,OAAOC,KAAI,SAACC,GAAD,MAC9B,CACEC,MAAM,GAAD,OAAKD,EAAKC,OACfC,OAAO,GAAD,OAAKF,EAAKE,eAGnBR,MAAK,SAACI,GACL,IAAMK,EAAQC,KAAKC,MAAMD,KAAKE,SAAWR,EAAOS,QAChD,EAAKC,SAAS,CACZP,MAAOH,EAAOK,GAAOF,MACrBC,OAAQJ,EAAOK,GAAOD,OACtBO,SAAU,0CAA4CX,EAAOK,GAAOF,MAAMS,QAAQ,KAAM,KAAO,KAAOZ,EAAOK,GAAOD,OAAOQ,QAAQ,KAAM,UAG5IC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,mBAAoBF,OApCjC,EAwCnBG,eAAiB,WAIf,IAHA,IAAMC,EAAS,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,UAC9DC,EAAcD,EAAOZ,KAAKC,MAAMD,KAAKE,SAAWU,EAAOT,SAEpDU,IAAgB,EAAK3B,MAAM4B,OAChCD,EAAcD,EAAOZ,KAAKC,MAAMD,KAAKE,SAAWU,EAAOT,SAGzD,EAAKjB,MAAM6B,kBAAkBF,GAC7B,EAAKzB,kBA/CL,EAAK4B,MAAQ,CACXnB,MAAO,GACPC,OAAQ,GACRO,SAAU,IAIZ,EAAKjB,eAAiB,EAAKA,eAAe6B,KAApB,gBACtB,EAAKN,eAAiB,EAAKA,eAAeM,KAApB,gBAVL,E,qDAoDT,IAAD,EAC6BC,KAAKF,MAAjCnB,EADD,EACCA,MAAOC,EADR,EACQA,OAAQO,EADhB,EACgBA,SACvB,OACE,yBAAKc,GAAG,aACN,yBAAKA,GAAG,mBACN,uBAAGA,GAAG,QAAQ,IAAMtB,EAAO,KAC3B,uBAAGsB,GAAG,UAAN,IAAiBrB,IAEnB,yBAAKqB,GAAG,iBACN,4BAAQA,GAAG,eAAc,uBAAGC,KAAMf,GAAU,uBAAGgB,UAAU,gBAAgBC,cAAY,WAErF,4BAAQH,GAAG,YAAYI,QAASL,KAAKP,gBAArC,mB,GAhEaa,IAAMC,YC4BdC,G,MA1Bf,kDACE,aAAe,IAAD,8BACZ,gBASFX,kBAAoB,SAACF,GACnB,EAAKT,SAAS,CACZU,MAAOD,KAVT,EAAKG,MAAQ,CACXF,MAAO,UAGT,EAAKC,kBAAoB,EAAKA,kBAAkBE,KAAvB,gBANb,EADhB,qDAkBI,OACI,yBAAKE,GAAG,MAAME,UAAWH,KAAKF,MAAMF,OAClC,kBAAC,EAAD,CAAUA,MAAOI,KAAKF,MAAMF,MAAOC,kBAAmBG,KAAKH,yBApBrE,GAAyBU,c,MCCzBE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.f9979487.chunk.js","sourcesContent":["import React from 'react'\r\nimport './QuoteBox.css'\r\n\r\nclass QuoteBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quote: '',\r\n      author: '',\r\n      tweetURL: \"\"\r\n    } \r\n\r\n    // Bind Handles and Functions\r\n    this.getRandomQuote = this.getRandomQuote.bind(this);\r\n    this.handleNewQuote = this.handleNewQuote.bind(this);\r\n  }\r\n\r\n  // Get random quote at component startup\r\n  componentDidMount = () => {\r\n    this.getRandomQuote()\r\n  }\r\n\r\n  // Fetch random quote from an API and set state\r\n  getRandomQuote = () => {\r\n    fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n      .then((response) => response.json())\r\n      .then((data) => data.quotes.map((item) => (\r\n        {\r\n          quote: `${item.quote}`,\r\n          author: `${item.author}`\r\n        }\r\n      )))\r\n      .then((quotes) => {\r\n        const index = Math.floor(Math.random() * quotes.length);\r\n        this.setState({\r\n          quote: quotes[index].quote,\r\n          author: quotes[index].author,\r\n          tweetURL: \"https://twitter.com/intent/tweet/?text=\" + quotes[index].quote.replace(/ /g, \"+\") + \"+-\" + quotes[index].author.replace(/ /g, \"+\")\r\n        })\r\n      })\r\n      .catch(error => console.log('An Error Occured', error))\r\n  }\r\n\r\n  // Handle new quote and color change on button click\r\n  handleNewQuote = () => {\r\n    const colors = ['color1', 'color2', 'color3', 'color4', 'color5', 'color6'];\r\n    let randomColor = colors[Math.floor(Math.random() * colors.length)];\r\n\r\n    while (randomColor === this.props.color) {\r\n      randomColor = colors[Math.floor(Math.random() * colors.length)];\r\n    }\r\n\r\n    this.props.handleColorChange(randomColor)\r\n    this.getRandomQuote();\r\n  }\r\n    \r\n  render() {\r\n    const { quote, author, tweetURL } = this.state;\r\n    return (\r\n      <div id=\"quote-box\">\r\n        <div id=\"quote-container\">\r\n          <p id=\"text\">{\"\\\"\"}{quote}{\"\\\"\"}</p>\r\n          <p id=\"author\">-{author}</p>\r\n        </div>\r\n        <div id=\"btn-container\">\r\n          <button id=\"tweet-quote\"><a href={tweetURL}><i className=\"fa fa-twitter\" aria-hidden=\"true\"></i>\r\n</a></button>\r\n          <button id=\"new-quote\" onClick={this.handleNewQuote}>New Quote</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuoteBox;","import React, { Component } from 'react';\nimport QuoteBox from './components/QuoteBox';\nimport './App.css'\n\n\nexport class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      color: 'color1'\n    }\n    // Bind Handle color change\n    this.handleColorChange = this.handleColorChange.bind(this);\n  }\n  \n  // Get randomColor value from QuoteBox and set state\n  handleColorChange = (randomColor) => {\n    this.setState({\n      color: randomColor\n    })\n  }\n\n  render() {\n    return (\n        <div id=\"app\" className={this.state.color}>\n          <QuoteBox color={this.state.color} handleColorChange={this.handleColorChange} />\n        </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}